{"version":3,"sources":["components/Filter/Filter.module.css","components/Section/Section.module.css","components/Section/Section.js","redux/action-creators.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","Container","children","className","styles","section","actions","addUsersContact","createAction","user","payload","uid","uuidv4","deleteUsersContact","changeContactsFilter","ContactForm","useState","name","setName","number","setNumber","existingContacts","useSelector","state","contacts","items","dispatch","useDispatch","onInputChange","event","target","value","form","onSubmit","contact","preventDefault","find","existingContact","alert","label","input","type","pattern","title","required","autoComplete","onChange","button","Filter","filterValue","filter","disabled","length","e","ContactList","item","toLowerCase","includes","getFilteredContacts","list","map","wrapper","onClick","App","Section","createReducer","_","reducer","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","storeObj","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9b163e9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1lnjh\",\"input\":\"Filter_input__1gUKP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2kmLj\"};","import styles from './Section.module.css';\r\n\r\nfunction Container({ children }) {\r\n    return (\r\n        <div className={styles.section}>{children}</div>\r\n    );\r\n}\r\n\r\nexport default Container;","import { createAction } from '@reduxjs/toolkit';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst addUsersContact = createAction('contacts/add', user => ({payload: {\r\n    uid: uuidv4(),\r\n    ...user\r\n  }}));\r\nconst deleteUsersContact = createAction('contacts/delete');\r\nconst changeContactsFilter = createAction('contacts/filter');\r\n\r\nconst actions = { addUsersContact, deleteUsersContact, changeContactsFilter };\r\n\r\nexport default actions;\r\n","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styles from './ContactForm.module.css';\r\nimport actions from '../../redux/action-creators'\r\n\r\n\r\nfunction ContactForm() {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const existingContacts = useSelector(state => state.contacts.items);\r\n    const dispatch = useDispatch();\r\n\r\n    const onInputChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const onInputReset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    const onFormSubmit = contact => dispatch(actions.addUsersContact(contact));\r\n\r\n    const HandleFormSubmit = event => {\r\n        event.preventDefault();\r\n        \r\n        const existingContact = existingContacts.find(existingContact => {\r\n            return existingContact.name === name;\r\n        });\r\n        if (existingContact) {\r\n            alert('Contact already exists. Try another name');\r\n            setName('');\r\n            return;\r\n        }\r\n        onFormSubmit({name, number});\r\n        onInputReset();\r\n    }\r\n\r\n        return (\r\n            <form className={styles.form} onSubmit={HandleFormSubmit}>\r\n                <label className={styles.label}>\r\n                    Name\r\n                    <input\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        onChange={onInputChange}\r\n                    />\r\n                </label>\r\n                <label className={styles.label}>\r\n                    Number\r\n                    <input\r\n                        className={styles.input}\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        onChange={onInputChange}\r\n                    />\r\n                </label>\r\n                <button className={styles.button} type=\"submit\">Add a contact</button>\r\n            </form>\r\n        );\r\n}\r\n\r\nexport default ContactForm;","import { useSelector, useDispatch } from 'react-redux';\r\nimport styles from './Filter.module.css';\r\nimport actions from '../../redux/action-creators';\r\n\r\nfunction Filter() {\r\n    const contacts = useSelector(state => state.contacts.items);\r\n    const filterValue = useSelector(state => state.contacts.filter);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <label className={styles.label}>\r\n            Find contacts by name\r\n            <input\r\n                className={styles.input}\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={filterValue}\r\n                autoComplete=\"off\"\r\n                disabled={!contacts.length > 0}\r\n                onChange={e => dispatch(actions.changeContactsFilter(e.target.value))}\r\n            />\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default Filter;","import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styles from './ContactList.module.css';\r\nimport actions from '../../redux/action-creators';\r\n\r\n\r\nfunction ContactList() {\r\n    const contacts = useSelector(({contacts: {items, filter}}) => getFilteredContacts(items, filter));\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ul className={styles.list}>\r\n            {contacts.map(({uid, name, number}) => {\r\n                return (\r\n                    <li className={styles.item} key={uid}>\r\n                        <div className={styles.wrapper}>\r\n                            <p className={styles.name}>{name}</p>\r\n                            <span className={styles.number}>{number}</span>\r\n                            <button className={styles.button}\r\n                                    onClick={() => dispatch(actions.deleteUsersContact(uid))}>Delete\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nfunction getFilteredContacts(items, filter) {\r\n    return items.filter(item => {\r\n        return item.name.toLowerCase().includes(filter.toLowerCase())\r\n    })\r\n}\r\n\r\nexport default ContactList;","import { Fragment } from \"react\";\n\nimport Section from \"./components/Section\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from './components/Filter';\nimport ContactList from \"./components/ContactList\";\n\n\nfunction App() {\n\n    return (\n        <Fragment>\n            <Section>\n                <h1 className=\"\">Phonebook</h1>\n                <ContactForm />\n            </Section>\n            <Section>\n                <h2 className=\"\">Contacts</h2>\n                <Filter />\n                <ContactList />\n            </Section>\n        </Fragment>\n    );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer, configureStore } from '@reduxjs/toolkit';\r\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport actions from './action-creators';\r\n\r\nconst items = createReducer([],{\r\n  [actions.addUsersContact]: (state, {payload}) => [payload, ...state],\r\n  [actions.deleteUsersContact]: (state, {payload}) => state.filter(({uid}) => uid !== payload)\r\n});\r\nconst filter = createReducer('', {\r\n  [actions.changeContactsFilter]: (_, {payload}) => payload\r\n});\r\n\r\nconst reducer = combineReducers({items, filter});\r\n\r\nconst persistConfig = {\r\n  key: 'savedItems',\r\n  storage,\r\n  blacklist: ['filter']\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistConfig, reducer)\r\n  },\r\n  middleware: (getDefaultMiddleware) => [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n  })],\r\n  devTools: process.env.NODE_ENV === 'development'\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nconst storeObj = {store, persistor};\r\n\r\nexport default storeObj;\r\n\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {PersistGate} from 'redux-persist/integration/react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1JOOI\",\"label\":\"ContactForm_label__IuFJA\",\"input\":\"ContactForm_input__WZL_-\",\"button\":\"ContactForm_button__3JBuB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3WiBJ\",\"wrapper\":\"ContactList_wrapper__204tu\",\"item\":\"ContactList_item__2CNMi\",\"button\":\"ContactList_button__2mDWw\",\"name\":\"ContactList_name__1owVT\",\"number\":\"ContactList_number__KS2ld\"};"],"sourceRoot":""}